import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const event = await request.json()

    console.log("๐ ุชุชุจุน ุญุฏุซ:", event.name, event.properties)

    // ุญูุธ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    // await saveEventToDatabase(event)

    // ุฅุฑุณุงู ุฅูู ุฎุฏูุงุช ุงูุชุญูููุงุช ุงูุฎุงุฑุฌูุฉ
    await Promise.all([sendToGoogleAnalytics(event), sendToMixpanel(event), sendToCustomAnalytics(event)])

    return NextResponse.json({
      success: true,
      message: "ุชู ุชุชุจุน ุงูุญุฏุซ ุจูุฌุงุญ",
    })
  } catch (error) {
    console.error("โ ุฎุทุฃ ูู ุชุชุจุน ุงูุชุญูููุงุช:", error)
    return NextResponse.json(
      {
        success: false,
        message: "ูุดู ูู ุชุชุจุน ุงูุญุฏุซ",
      },
      { status: 500 },
    )
  }
}

async function sendToGoogleAnalytics(event: any) {
  // ุชูุงูู Google Analytics
  const measurementId = process.env.GA_MEASUREMENT_ID
  const apiSecret = process.env.GA_API_SECRET

  if (!measurementId || !apiSecret) {
    console.log("๐ ูุญุงูุงุฉ ุฅุฑุณุงู ุฅูู Google Analytics")
    return
  }

  try {
    await fetch(`https://www.google-analytics.com/mp/collect?measurement_id=${measurementId}&api_secret=${apiSecret}`, {
      method: "POST",
      body: JSON.stringify({
        client_id: event.properties?.sessionId || "anonymous",
        events: [
          {
            name: event.name,
            params: event.properties,
          },
        ],
      }),
    })
    console.log("โ ุชู ุฅุฑุณุงู ุงูุญุฏุซ ุฅูู Google Analytics")
  } catch (error) {
    console.error("โ ุฎุทุฃ ูู Google Analytics:", error)
  }
}

async function sendToMixpanel(event: any) {
  // ุชูุงูู Mixpanel
  const projectToken = process.env.MIXPANEL_PROJECT_TOKEN

  if (!projectToken) {
    console.log("๐ ูุญุงูุงุฉ ุฅุฑุณุงู ุฅูู Mixpanel")
    return
  }

  try {
    const data = Buffer.from(
      JSON.stringify({
        event: event.name,
        properties: {
          ...event.properties,
          token: projectToken,
          time: event.timestamp,
        },
      }),
    )

    await fetch("https://api.mixpanel.com/track", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: `data=${data.toString("base64")}`,
    })
    console.log("โ ุชู ุฅุฑุณุงู ุงูุญุฏุซ ุฅูู Mixpanel")
  } catch (error) {
    console.error("โ ุฎุทุฃ ูู Mixpanel:", error)
  }
}

async function sendToCustomAnalytics(event: any) {
  // ุฎุฏูุฉ ุชุญูููุงุช ูุฎุตุตุฉ
  console.log("๐ ุฅุฑุณุงู ุฅูู ุฎุฏูุฉ ุงูุชุญูููุงุช ุงููุฎุตุตุฉ:", event.name)

  try {
    // ููููู ุฅุถุงูุฉ ุชูุงูู ูุน ุฎุฏูุฉ ุชุญูููุงุช ูุฎุตุตุฉ ููุง
    // ูุซู Amplitudeุ Segmentุ ุฃู ุฎุฏูุฉ ุฏุงุฎููุฉ

    // ูุญุงูุงุฉ ุงูุฅุฑุณุงู
    await new Promise((resolve) => setTimeout(resolve, 100))
    console.log("โ ุชู ุฅุฑุณุงู ุงูุญุฏุซ ุฅูู ุงูุฎุฏูุฉ ุงููุฎุตุตุฉ")
  } catch (error) {
    console.error("โ ุฎุทุฃ ูู ุงูุฎุฏูุฉ ุงููุฎุตุตุฉ:", error)
  }
}
